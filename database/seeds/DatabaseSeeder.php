<?php

use Illuminate\Database\Seeder;

use Jenssegers\Date\Date;

class DatabaseSeeder extends Seeder
{

    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $faker = Faker\Factory::create();

        $this->call(CodesTableSeeder::class);
        $this->call(RandomWeekDaysTableSeeder::class);

        $admin = factory(App\Admin::class, 4)
            ->make()
            ->each(function(App\Admin $a) {
                $a->timestamps = false;
                $a->is_random = true;
                $a->save();
            });

        $therapists = factory(App\Therapist::class, 4)
            ->make()
            ->each(function (App\Therapist $t) {
                $t->timestamps = false;
                $t->is_random = true;
                $t->save();
            });

        $assignmentTemplates = factory(App\AssignmentTemplate::class, 4)
            ->make()
            ->each(function (App\AssignmentTemplate $t) {
                $t->timestamps = false;
                $t->is_random = true;
                $t->save();
            });;

        $patients = factory(App\Patient::class, 20)
            ->make()
            ->each(function (App\Patient $p) use ($faker) {
                $p->timestamps = false;
                $p->is_random = true;
                $p->personal_information = $faker->realText();
                $p->notes_of_therapist = $faker->realText();
                $p->save();
            });;

        foreach ($patients as $patient) {
            // every patient has a random number of assignments
            $assignment_count = rand(2,10);
            // choose random therapist
            $therapist = App\Therapist::all()->random();
            $therapist->patients()->save($patient);

            // the registration happened before the first assignment
            // add 1-3 weeks between the registration and the first assignment
            $patient->registration_date = Date::now()->startOfWeek()
                    ->subWeeks($assignment_count + rand(1,3));

            $end = Date::now()->startOfWeek()->next($patient->assignment_day)->isPast()
                        ? $assignment_count : $assignment_count-1;

            // create a bunch of successive assignments
            for ($count = 1; $count <= $end; $count++) {
                // the assignment should happen in the past /
                // the assignment should happen during work hours
                $assignment_date = Date::now()->startOfWeek()->addHours(rand(8,18));

                // use the chosen weekday
                $assignment_date->next($patient->assignment_day);

                // assignments should be successive
                $assignment_date->subWeeks($assignment_count - $count);

                // create the actual assignment
                $assignment = factory(App\Assignment::class)->make();
                // don't save timestamps (for testing)
                $assignment->timestamps = false;
                // mark entry - assignment is generated by seeder
                $assignment->is_random = true;

                $assignment->assigned_on = $assignment_date;

                // assignments mustn't be assigned yet
                // -> an assignment is saved for a specific week
                // -> details are filled in later
                $assignment->week = $count;

                // 60% chance: the patient completed the assignment
                //(the patient sent in a final text)
                $saved = rand(0,10) <= 6;
                $saved ? $assignment->state = true : $assignment->state = false;

                // choose random template
                $template = App\AssignmentTemplate::all()->random();

                // 75% chance: the templates text wasn't modified
                $assignment->assignment_text = (rand(0,3) === 0) ? $faker->realText() : $template->text;

                // save assignment to DB
                $assignment->save();

                $template->assignments()->save($assignment);
                $patient->assignments()->save($assignment);

                // generate comment if patient has finished assignment
                if ($saved) {
                    $comment = factory(App\Comment::class)->make();
                    $comment->timestamps = false;
                    $comment->is_random = true;

                    // answer is commented is created within 48 hours
                    // (this may result in comments late at night ^^)
                    $comment->date = $assignment_date->copy()->addHours(rand(0,48) - $assignment_date->hour);

                    $comment->save();

                    // associate the comment with the therapist
                    // and the assignment
                    $assignment->comment()->save($comment);
                    $therapist->comments()->save($comment);

                    $rating = rand(0,10) <= 6;

                    if ($rating) {
                        $reply = factory(App\CommentReply::class)->make();
                        $reply->is_random = true;
                        $reply->timestamps = false;

                        $reply->save();

                        $comment->comment_reply()->save($reply);
                    }
                }
            }

            $first_assignment = $patient->assignments->sortBy('assigned_on')->first();
            // date of departure has to be between the registration date und the first assignment
            $patient->date_from_clinics =
                $faker->dateTimeBetween($first_assignment->assigned_on->copy()->startOfWeek()->subWeek(),
                    $patient->assignments->sortBy('assigned_on')->first()->assigned_on->copy()->startOfWeek());
                // the login date needs to be coherent
            // -> assume that the patient has viewed the last assignment
            $patient->last_login = $faker->dateTimeBetween(
                $patient->assignments()->get()->sortBy('assigned_on')->last()->assigned_on, 'now');
            // assume user didn't logout
            $patient->last_activity = $faker->dateTimeBetween($patient->last_login, 'now');
            // save the registration date, login date
            $patient->save();
        }
    }
}
