<?php

use Illuminate\Database\Seeder;

use App\Patient;
use App\Admin;
use App\Therapist;

use App\Assignment;
use App\AssignmentTemplate;

use App\Comment;
use App\CommentReply;

use App\PHQ4;
use App\WAI;
use App\Survey;

use Illuminate\Database\Eloquent\Model;

use Jenssegers\Date\Date;

class DatabaseSeeder extends Seeder
{

    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run()
    {
        $faker = Faker\Factory::create();

        $this->call(CodesTableSeeder::class);
        $this->call(RandomWeekDaysTableSeeder::class);

        $admin = factory(Admin::class, 4)
            ->make()
            ->each(function(Admin $a) {
                $this->set_developer_attributes_and_save($a);
            });

        $therapists = factory(Therapist::class, 4)
            ->make()
            ->each(function (Therapist $t) {
                $this->set_developer_attributes_and_save($t);
            });

        $assignmentTemplates = factory(AssignmentTemplate::class, 4)
            ->make()
            ->each(function (AssignmentTemplate $t) {
                $this->set_developer_attributes_and_save($t);
            });;

        $patients = factory(Patient::class, 20)
            ->make()
            ->each(function (Patient $p) use ($faker) {
                $this->set_developer_attributes($p);
                $p->personal_information = $faker->realText();
                $p->notes_of_therapist = $faker->realText();
                $p->save();
            });;

        foreach ($patients as $patient) {
            // every patient has a random number of assignments
            $assignment_count = rand(2,10);
            // choose random therapist
            $therapist = Therapist::all()->random();
            $therapist->patients()->save($patient);

            // the registration happened before the first assignment
            // add 1-3 weeks between the registration and the first assignment
            $patient->registration_date = Date::now()->startOfWeek()
                    ->subWeeks($assignment_count + rand(1,3));

            $end = Date::now()->startOfWeek()->next($patient->assignment_day)->isPast()
                        ? $assignment_count : $assignment_count-1;

            // create a bunch of successive assignments
            for ($count = 1; $count <= $end; $count++) {
                // the assignment should happen in the past /
                // the assignment should happen during work hours
                $assignment_date = Date::now()->startOfWeek()->addHours(rand(8,18));

                // use the chosen weekday
                $assignment_date->next($patient->assignment_day);

                // assignments should be successive
                $assignment_date->subWeeks($assignment_count - $count);

                // create the actual assignment
                $assignment = factory(Assignment::class)->make();

                // don't save timestamps (for testing) and
                // mark entry - assignment is generated by seeder
                $this->set_developer_attributes($assignment);

                $assignment->assigned_on = $assignment_date;

                // assignments mustn't be assigned yet
                // -> an assignment is saved for a specific week
                // -> details are filled in later
                $assignment->week = $count;

                // 60% chance: the patient completed the assignment
                //(the patient sent in a final text)
                $saved = rand(0,10) <= 6;
                $saved ? $assignment->dirty = false : $assignment->dirty = true;

                // choose random template
                $template = AssignmentTemplate::all()->random();

                // 75% chance: the templates text wasn't modified
                $assignment->assignment_text = (rand(0,3) === 0) ? $faker->realText() : $template->problem_template;

                // save assignment to DB
                $assignment->save();

                $template->assignments()->save($assignment);
                $patient->assignments()->save($assignment);

                // generate comment if patient has finished assignment
                if ($saved) {
                    $comment = factory(Comment::class)->make();
                    $this->set_developer_attributes($comment);

                    // answer is commented is created within 48 hours
                    // (this may result in comments late at night ^^)
                    $comment->date = $assignment_date->copy()->addHours(rand(0,48) - $assignment_date->hour);

                    $comment->save();

                    // associate the comment with the therapist
                    // and the assignment
                    $assignment->comment()->save($comment);
                    $therapist->comments()->save($comment);

                    $rating = rand(0,10) <= 6;

                    if ($rating) {
                        $reply = factory(CommentReply::class)->make();
                        $this->set_developer_attributes($reply);

                        $reply->save();

                        $comment->comment_reply()->save($reply);
                    }

                    $survey = factory(Survey::class)->make();
                    $this->set_developer_attributes($survey);

                    $survey->save();

                    $phq4 = factory(PHQ4::class)->make();
                    $this->set_developer_attributes($phq4);

                    $phq4->save();

                    $wai = factory(WAI::class)->make();
                    $this->set_developer_attributes($wai);

                    $wai->save();

                    $survey->phq4()->save($phq4);
                    $survey->wai()->save($wai);
                }
            }

            $first_assignment = $patient->assignments->sortBy('assigned_on')->first();
            // date of departure has to be between the registration date und the first assignment
            $patient->date_from_clinics =
                $faker->dateTimeBetween($first_assignment->assigned_on->copy()->startOfWeek()->subWeek(),
                    $patient->assignments->sortBy('assigned_on')->first()->assigned_on->copy()->startOfWeek());
                // the login date needs to be coherent
            // -> assume that the patient has viewed the last assignment
            $patient->last_login = $faker->dateTimeBetween(
                $patient->assignments()->get()->sortBy('assigned_on')->last()->assigned_on, 'now');
            // assume user didn't logout
            $patient->last_activity = $faker->dateTimeBetween($patient->last_login, 'now');
            // save the registration date, login date
            $patient->save();
        }
    }

    protected function set_developer_attributes(Model &$model) {
        $model->is_random = true;
        $model->timestamps = false;
    }

    protected function set_developer_attributes_and_save(Model &$model) {
        $this->set_developer_attributes($model);
        $model->save();
    }
}
